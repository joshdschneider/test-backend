/// <reference types="qs" />
import { NextFunction, Request, Response } from "express";
import { BaseAuthOptions, UserRole, User } from "@propelauth/node";
export declare function initAuth(opts: BaseAuthOptions): {
    requireUser: (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    optionalUser: (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    requireOrgMember: (args?: RequireOrgMemberArgs | undefined) => (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    fetchUserMetadataByUserId: (userId: string, includeOrgs?: boolean | undefined) => Promise<import("@propelauth/node").UserMetadata | null>;
    fetchUserMetadataByEmail: (email: string, includeOrgs?: boolean | undefined) => Promise<import("@propelauth/node").UserMetadata | null>;
    fetchUserMetadataByUsername: (username: string, includeOrgs?: boolean | undefined) => Promise<import("@propelauth/node").UserMetadata | null>;
    fetchBatchUserMetadataByUserIds: (userIds: string[], includeOrgs?: boolean | undefined) => Promise<{
        [userId: string]: import("@propelauth/node").UserMetadata;
    }>;
    fetchBatchUserMetadataByEmails: (emails: string[], includeOrgs?: boolean | undefined) => Promise<{
        [email: string]: import("@propelauth/node").UserMetadata;
    }>;
    fetchBatchUserMetadataByUsernames: (usernames: string[], includeOrgs?: boolean | undefined) => Promise<{
        [username: string]: import("@propelauth/node").UserMetadata;
    }>;
    fetchOrg: (orgId: string) => Promise<import("@propelauth/node").Org | null>;
    fetchOrgByQuery: (orgQuery: import("@propelauth/node").OrgQuery) => Promise<import("@propelauth/node").OrgQueryResponse>;
    fetchUsersByQuery: (usersQuery: import("@propelauth/node").UsersQuery) => Promise<import("@propelauth/node").UsersPagedResponse>;
    fetchUsersInOrg: (usersInOrgQuery: import("@propelauth/node").UsersInOrgQuery) => Promise<import("@propelauth/node").UsersPagedResponse>;
    createUser: (createUserRequest: import("@propelauth/node").CreateUserRequest) => Promise<User>;
    updateUserMetadata: (userId: string, updateUserMetadataRequest: import("@propelauth/node").UpdateUserMetadataRequest) => Promise<boolean>;
    updateUserEmail: (userId: string, updateUserEmailRequest: import("@propelauth/node").UpdateUserEmailRequest) => Promise<boolean>;
    createMagicLink: (createMagicLinkRequest: import("@propelauth/node").CreateMagicLinkRequest) => Promise<import("@propelauth/node").MagicLink>;
    UserRole: typeof UserRole;
};
export interface RequireOrgMemberArgs {
    minimumRequiredRole?: UserRole;
    orgIdExtractor?: (req: Request) => string;
    orgNameExtractor?: (req: Request) => string;
}
