import { Org, User, UserMetadata } from "./user";
export declare type TokenVerificationMetadata = {
    verifierKey: string;
    issuer: string;
};
export declare function fetchTokenVerificationMetadata(authUrl: URL, apiKey: string, manualTokenVerificationMetadata?: TokenVerificationMetadata): Promise<TokenVerificationMetadata>;
export declare function fetchUserMetadataByUserIdWithIdCheck(authUrl: URL, apiKey: string, userId: string, includeOrgs?: boolean): Promise<UserMetadata | null>;
export declare function fetchUserMetadataByQuery(authUrl: URL, apiKey: string, pathParam: string, query: any): Promise<UserMetadata | null>;
export declare function fetchBatchUserMetadata(authUrl: URL, apiKey: string, type: string, values: string[], keyFunction: (x: UserMetadata) => string, includeOrgs?: boolean): Promise<{
    [key: string]: UserMetadata;
}>;
export declare function fetchOrg(authUrl: URL, apiKey: string, orgId: string): Promise<Org | null>;
export declare type OrgQuery = {
    pageSize?: number;
    pageNumber?: number;
    orderBy?: "CREATED_AT_ASC" | "CREATED_AT_DESC" | "NAME";
};
export declare type OrgQueryResponse = {
    orgs: Org[];
    totalOrgs: number;
    currentPage: number;
    pageSize: number;
    hasMoreResults: boolean;
};
export declare function fetchOrgByQuery(authUrl: URL, apiKey: string, query: OrgQuery): Promise<OrgQueryResponse>;
export declare type UsersQuery = {
    pageSize?: number;
    pageNumber?: number;
    orderBy?: "CREATED_AT_ASC" | "CREATED_AT_DESC" | "LAST_ACTIVE_AT_ASC" | "LAST_ACTIVE_AT_DESC" | "EMAIL" | "USERNAME";
    emailOrUsername?: string;
    includeOrgs?: boolean;
};
export declare type UsersPagedResponse = {
    users: UserMetadata[];
    totalUsers: number;
    currentPage: number;
    pageSize: number;
    hasMoreResults: boolean;
};
export declare function fetchUsersByQuery(authUrl: URL, apiKey: string, query: UsersQuery): Promise<UsersPagedResponse>;
export declare type UsersInOrgQuery = {
    orgId: string;
    pageSize?: number;
    pageNumber?: number;
    includeOrgs?: boolean;
};
export declare function fetchUsersInOrg(authUrl: URL, apiKey: string, query: UsersInOrgQuery): Promise<UsersPagedResponse>;
export declare type CreateUserRequest = {
    email: string;
    emailConfirmed?: boolean;
    sendEmailToConfirmEmailAddress?: boolean;
    password?: string;
    username?: string;
    firstName?: string;
    lastName?: string;
};
export declare function createUser(authUrl: URL, apiKey: string, createUserRequest: CreateUserRequest): Promise<User>;
export declare type UpdateUserMetadataRequest = {
    username?: string;
    firstName?: string;
    lastName?: string;
};
export declare function updateUserMetadata(authUrl: URL, apiKey: string, userId: string, updateUserMetadataRequest: UpdateUserMetadataRequest): Promise<boolean>;
export declare type UpdateUserEmailRequest = {
    newEmail: string;
    requireEmailConfirmation: boolean;
};
export declare function updateUserEmail(authUrl: URL, apiKey: string, userId: string, updateUserEmail: UpdateUserEmailRequest): Promise<boolean>;
export declare type CreateMagicLinkRequest = {
    email: string;
    redirectToUrl?: string;
    expiresInHours?: string;
    createNewUserIfOneDoesntExist?: boolean;
};
export declare type MagicLink = {
    url: string;
};
export declare function createMagicLink(authUrl: URL, apiKey: string, createMagicLinkRequest: CreateMagicLinkRequest): Promise<MagicLink>;
