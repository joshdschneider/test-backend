import { CreateMagicLinkRequest, CreateUserRequest, MagicLink, OrgQuery, OrgQueryResponse, TokenVerificationMetadata, UpdateUserEmailRequest, UpdateUserMetadataRequest, UsersInOrgQuery, UsersPagedResponse, UsersQuery } from "./api";
import { Org, User, UserAndOrgMemberInfo, UserMetadata, UserRole } from "./user";
export declare type BaseAuthOptions = {
    authUrl: string;
    apiKey: string;
    /**
     * By default, this library performs a one-time fetch on startup for
     *   token verification metadata from your authUrl using your apiKey.
     *
     * This is usually preferred to make sure you have the most up to date information,
     *   however, in environments like serverless, this one-time fetch becomes a
     *   per-request fetch.
     *
     * In those environments, you can specify the token verification metadata manually,
     *   which you can obtain from your PropelAuth project.
     */
    manualTokenVerificationMetadata?: TokenVerificationMetadata;
};
export declare function initBaseAuth(opts: BaseAuthOptions): {
    validateAccessTokenAndGetUser: (authorizationHeader?: string | undefined) => Promise<User>;
    validateAccessTokenAndGetUserWithOrg: (authorizationHeader: string | undefined, requiredOrgId: string, minimumRequiredRole?: UserRole | undefined) => Promise<UserAndOrgMemberInfo>;
    validateAccessTokenAndGetUserWithOrgInfo: (authorizationHeader: string | undefined, requiredOrgInfo: RequriedOrgInfo, minimumRequiredRole?: UserRole | undefined) => Promise<UserAndOrgMemberInfo>;
    fetchUserMetadataByUserId: (userId: string, includeOrgs?: boolean | undefined) => Promise<UserMetadata | null>;
    fetchUserMetadataByEmail: (email: string, includeOrgs?: boolean | undefined) => Promise<UserMetadata | null>;
    fetchUserMetadataByUsername: (username: string, includeOrgs?: boolean | undefined) => Promise<UserMetadata | null>;
    fetchBatchUserMetadataByUserIds: (userIds: string[], includeOrgs?: boolean | undefined) => Promise<{
        [userId: string]: UserMetadata;
    }>;
    fetchBatchUserMetadataByEmails: (emails: string[], includeOrgs?: boolean | undefined) => Promise<{
        [email: string]: UserMetadata;
    }>;
    fetchBatchUserMetadataByUsernames: (usernames: string[], includeOrgs?: boolean | undefined) => Promise<{
        [username: string]: UserMetadata;
    }>;
    fetchOrg: (orgId: string) => Promise<Org | null>;
    fetchOrgByQuery: (orgQuery: OrgQuery) => Promise<OrgQueryResponse>;
    fetchUsersByQuery: (usersQuery: UsersQuery) => Promise<UsersPagedResponse>;
    fetchUsersInOrg: (usersInOrgQuery: UsersInOrgQuery) => Promise<UsersPagedResponse>;
    createUser: (createUserRequest: CreateUserRequest) => Promise<User>;
    updateUserMetadata: (userId: string, updateUserMetadataRequest: UpdateUserMetadataRequest) => Promise<boolean>;
    updateUserEmail: (userId: string, updateUserEmailRequest: UpdateUserEmailRequest) => Promise<boolean>;
    createMagicLink: (createMagicLinkRequest: CreateMagicLinkRequest) => Promise<MagicLink>;
    UserRole: typeof UserRole;
};
export declare type RequriedOrgInfo = {
    orgId?: string;
    orgName?: string;
};
